buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.11"
        classpath "gradle.plugin.pl.squirrel:classycle-gradle-plugin:1.2"
    }
}

plugins {
    id 'net.researchgate.release' version "2.5.0"
    id 'com.github.ben-manes.versions' version '0.14.0'
    id "net.ltgt.errorprone" version "0.0.9"
}

apply plugin: "info.solidsoft.pitest"
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'jdepend'
apply plugin: 'pmd'
apply plugin: "jacoco"
apply plugin: "pl.squirrel.classycle"

def travis = "$System.env.TRAVIS"

def password = "";
if (travis == "null") {
    println "Normal build detected"
    password = new File('C:\\Users\\grzes\\Dysk Google\\GradlePassword.txt').text

    gradle.taskGraph.whenReady { taskGraph ->
        if (taskGraph.allTasks.any { it instanceof Sign }) {
            allprojects {
                ext."signing.password" = password
                ext."signing.keyId" = '58596C05'
                ext."signing.secretKeyRingFile" = 'C:/Users/grzes/AppData/Roaming/gnupg/secring.gpg'
            }
        }
    }

    signing {
        sign configurations.archives
    }

} else {
    println "TRAVIS CI build detected"
}

group 'com.github.autofixture'
apply plugin: 'java'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}


task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

pitest {
    targetClasses = ['autofixture.*']  //by default "${project.group}.*"
    threads = 8
    outputFormats = ['XML', 'HTML']
}

checkstyle {
    ignoreFailures = false
    sourceSets = [project.sourceSets.main]
}

jdepend {
    ignoreFailures = false
}

findbugs {
    effort = "max"
    reportLevel = "high"
    ignoreFailures = false
}

dependencies {
    compile group: 'com.google.guava', name: 'guava', version: '21.0'
    compile group: 'com.sharneng', name: 'jsr305defaults', version: '2.0.3'
    compile group: 'org.objenesis', name: 'objenesis', version: '2.5.1'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testCompile group: 'org.jmock', name: 'jmock', version: '2.8.2'
    testCompile group: 'org.jmock', name: 'jmock-junit4', version: '2.8.2'
    testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'

}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

release {
    failOnCommitNeeded = false
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                //repository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                authentication(userName: "grzesiek-galezowski", password: password)
            }

            pom.project {
                name 'autofixturegenerator'
                packaging 'jar'
                description 'Auto Fixture Generator'
                url 'https://github.com/grzesiek-galezowski/AutoFixtureGenerator/'

                scm {
                    url 'scm:git@github.com:grzesiek-galezowski/AutoFixtureGenerator.git'
                    connection 'scm:git@github.com:grzesiek-galezowski/AutoFixtureGenerator.git'
                    developerConnection 'scm:git@github.com:grzesiek-galezowski/AutoFixtureGenerator.git'
                }

                licenses {
                    license {
                        name 'The MIT License (MIT)'
                        url 'http://opensource.org/licenses/MIT'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'grzesiek-galezowski'
                        name 'Grzegorz Gałęzowski'
                    }
                }
            }
        }
    }
}

uploadArchives.dependsOn([jar, test])
check.dependsOn("pitest")

afterReleaseBuild.dependsOn uploadArchives
tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}